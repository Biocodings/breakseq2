#!/bin/bash

set -ex
set -o pipefail

echo "*** BreakSeq Variant Calling " >&2

function usage {
  echo "Usage: TABIX_BIN= BGZIP_BIN= NPROCS= BWA_BIN= SAMTOOLS_BIN= BPLIB= REFERENCE= SCRATCH= LOGDIR= OUTDIR= CHRS= $0 <output> <bam>..." >&2
  echo "BWA_BIN and SAMTOOLS_BIN need not be set if bwa and samtools are already on the path." >&2
  echo "NPROCS is the number of BAMs to process in parallel. It is optional."
  exit 1
}

[ $# -lt 2 ] && usage

BPLIB="$BPLIB"
BWA_BIN=${BWA_BIN-bwa}
SAMTOOLS_BIN=${SAMTOOLS_BIN-samtools}
TABIX_BIN=${TABIX_BIN-tabix}
BGZIP_BIN=${BGZIP_BIN-bgzip}
[ -z "$NPROCS" ] && NPROCS=`nproc`
[ -z "$NPROCS" ] && NPROCS=1

[ -z "$BPLIB" -o -z "$REFERENCE" -o -z "$SCRATCH" -o -z "$LOGDIR" -o -z "$OUTDIR" -o -z "$TABIX_BIN" -o -z "$BGZIP_BIN" ] && usage

# Check that bwa and samtools are on the path
for exe in BWA_BIN SAMTOOLS_BIN; do
  command -v ${!exe} >/dev/null 2>&1 || { echo "$exe not specified" >&2 ; exit 1; }
done

BREAKSEQ_DIR=`cd \`dirname $0\`; pwd`
PYTHONPATH=$BREAKSEQ_DIR/../lib:$PYTHONPATH

shift

mkdir -pv $SCRATCH $LOGDIR $OUTDIR
SAMPLE=`$SAMTOOLS_BIN view -H $1 | grep ^@RG | head -n 1 | awk 'BEGIN{FS="\t"} {for (i=1; i<=NF; i++) {if (index($i, "SM:") == 1) print substr($i, 4)}}'`

o=$OUTDIR/$SAMPLE.gff
a=$OUTDIR/$SAMPLE.alt
w=$OUTDIR/$SAMPLE.out
v=$OUTDIR/$SAMPLE.vcf

bams=''
for i in $*; do
  bams="$bams `cd \`dirname $i\`; pwd`/`basename $i`"
done

breakseq_opt_vars="min_soft_clip min_soft_clip_mapq min_soft_clip_mate_mapq bad_map_max_soft_clip bad_map_min_mapq bad_map_min_nm bad_map_min_mate_mapq"
breakseq_opt_str=""
for var in $breakseq_opt_vars
do
  [ -n "${!var}" ] && breakseq_opt_str="$breakseq_opt_str $var=${!var}"
done

seqid=0
if [ -z "$CHRS" ]; then
    for bam in $bams; do
        let seqid=seqid+1
        outbam=$SCRATCH/$seqid.bam
        outlogpre=$LOGDIR/$seqid.log
        echo "PYTHONPATH=$PYTHONPATH $breakseq_opt_str BREAKSEQ_PRE=$BREAKSEQ_DIR/breakseq_pre INBAM=$bam OUTBAM=$outbam BWA_BIN=$BWA_BIN SAMTOOLS_BIN=$SAMTOOLS_BIN BPLIB=$BPLIB $BREAKSEQ_DIR/preprocess_and_align.sh &>$outlogpre"
    done | xargs -t -I CMD --max-procs=$NPROCS bash -c CMD
else
    for bam in $bams; do
        for chr in $CHRS; do
            let seqid=seqid+1
            outbam=$SCRATCH/$seqid.bam
            outlogpre=$LOGDIR/$seqid.log
            echo "PYTHONPATH=$PYTHONPATH $breakseq_opt_str BREAKSEQ_PRE=$BREAKSEQ_DIR/breakseq_pre INBAM=$bam OUTBAM=$outbam BWA_BIN=$BWA_BIN SAMTOOLS_BIN=$SAMTOOLS_BIN CHR=$chr BPLIB=$BPLIB $BREAKSEQ_DIR/preprocess_and_align.sh &>$outlogpre"
        done
    done | xargs -t -I CMD --max-procs=$NPROCS bash -c CMD
fi

xargs_exitcode=$?
[ "$xargs_exitcode" != "0" ] && echo "Read filtering and alignment failed" >&2 && exit $xargs_exitcode

outbams=
numbams=0
for seq in `seq $seqid`; do
  outbam=$SCRATCH/$seq.bam
  [ ! -s "$outbam" ] && continue
  outbams="$outbams $outbam"
  let numbams=numbams+1
done

if ((numbams > 1)); then
  $SAMTOOLS_BIN merge -f $a $outbams 2>$LOGDIR/merge.log
else
  cp $outbams $a
fi
rm -f $outbams

echo "*** Processing alternative mapping and generating GFF ***" >&2 
PYTHONPATH="$PYTHONPATH" $BREAKSEQ_DIR/breakseq_core $a $min_span > $w
PYTHONPATH="$PYTHONPATH" $BREAKSEQ_DIR/breakseq_post $w > $o

echo "*** Computing zygosity and generating VCF ***" >&2
PYTHONPATH="$PYTHONPATH" $BREAKSEQ_DIR/compute_zygosity.py --input_files $bams --window 100 --min_overlap 10 --input_gff $o 2>$LOGDIR/compute_zygosity.log | \
PYTHONPATH="$PYTHONPATH" $BREAKSEQ_DIR/gen_vcf.py --reference $REFERENCE --input_gff - --sample "$SAMPLE" --no_ref_allele --sort 2>$LOGDIR/gen_vcf.log | $BGZIP_BIN > $v.gz 2>$LOGDIR/bgzip.log
$TABIX_BIN $v.gz

echo "*** Finished BreakSeq ***" >&2
